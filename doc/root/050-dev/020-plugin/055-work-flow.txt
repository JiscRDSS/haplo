title: Workflow
long_title: Workflow support
--

The ONEIS Platform provides basic workflow support for guiding users through processes, but doesn't provide any implementation for the actual processes. The implementation is provided by plugins.

The facilities are:

 * Underlying representation of a unit of work, with [node:dev/plugin/interface/work-unit] objects
 * User interface
 ** Current open work units icon in menu bar on every page
 ** Work list, with current and future task listings
 ** Displaying work units attached to store objects on their pages
 * [node:dev/plugin/hook] for plugins to implement work flow using @WorkUnit@ objects.


h2. Plugin state

The platform provides three basic states for a work unit:

 * Future ([node:dev/plugin/interface/work-unit#openedAt] date not yet reached)
 * Open ([node:dev/plugin/interface/work-unit#openedAt] date is in the past, but it is not yet closed)
 * Closed ([node:dev/plugin/interface/work-unit#closedAt] date is set)

These are the minimum states required for the user interface. Open work units show in the work indicator and main work list. Future work units show in the future work list. Closed work units are only shown on the store objects, if they're attached to one.


h2. Actionable work units

A plugin can be 'actioned' by a user if the [node:dev/plugin/interface/work-unit#actionableBy] property is set to this user, or a group to which the user belongs.

Only actionable work units are shown in task lists.


h2. Plugin implementation

Plugins create [node:dev/plugin/interface/work-unit] objects with [node:dev/plugin/o/work-flow/create]. Work units can be created in response to [node:dev/plugin/hook:hooks], or to user interface added [node:dev/plugin/request-handling:elsewhere].

Work units are displayed in the Task listing, and on object pages. Use [node:dev/plugin/interface/plugin/platform-interface#workUnit] function on your Plugin object to define a renderer function which generates the HTML for the work unit. The rendered work units should show the process state and link to the user interface for performing tasks or changing state, implemented by your plugin.

Process state is stored in the @data@ property of the work units, which stores arbitrary JSON serialisable data structures. The plugin should use this to store data and note the state of the process.


h2. Example renderer function

To implement the rendering for work units with an @actionType@ of @example_plugin:action@, a plugin might use an implementation such as:

<pre>language=javascript
P.workUnit({
    workType: "action",
    description: "Simple test work unit",
    render: function(W) {
        W.render({
            fullInfo: '/do/example/action/'+W.workUnit.id,
            fullInfoText: "Perform action...",
            actionName: W.workUnit.data.actionName
        });
    }
});
</pre>

@W@ is a [node:dev/plugin/interface/plugin-work-unit-renderer] object generated by the framework. The [node:dev/plugin/interface/plugin-work-unit-renderer#render] function is called to generate the HTML, which, since an explicit template name is not passed as a second argument, uses the @action@ template.

The @actionName@ property is part of the view for the [node:dev/plugin/templates:template]. The @template/action.html@ file might contain the HTML:

<pre>
    Example action {{actionName}}.
</pre>

It'll be surrounded by a border automatically. The [node:dev/plugin/interface/plugin-work-unit-renderer#fullInfo] and [node:dev/plugin/interface/plugin-work-unit-renderer#fullInfoText] properties specify the link and text respectively. If the latter was omitted, the link would be captioned "Full info...".

If the @W.render()@ function is not called, then the work unit will not be displayed on the page. While this would be confusing for the Tasks list, it can be useful to omit irrelevant work units from an object page. You can tell the difference with the [node:dev/plugin/interface/plugin-work-unit-renderer#context] property.
