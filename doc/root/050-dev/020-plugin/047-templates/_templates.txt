title: Templates
--

Templates use "Handlebars":http://handlebarsjs.com/ compatible templates.

Partials are automatically supported, and can refer to plugin templates, or [node:dev/plugin/templates/std-template:standard templates].

Some [node:dev/plugin/templates/std-helper] are provided.


h2. Usage

Templates can be rendered when responding to an [node:dev/plugin/request-handling:HTTP request], or when responding to a [node:dev/plugin/hook:hook].

Some [node:dev/plugin/templates/std-template:standard templates] only work when the application is handling a request because they need access to an HTTP session, but this is unlikely to be a limitation in practice.


h2. Directory layout

Templates are stored in the @template@ (singular) directory, see [node:dev/plugin/directory-structure].

To get a [node:dev/plugin/interface/template] object to use for rendering, call [node:dev/plugin/interface/plugin/response-generation#template] on your [node:dev/plugin/interface/plugin] object. The name is the name of the file (without the extension) within the @template@ directory, or one of a standard template beginning @std:@.

The kind of template, available in the [node:dev/plugin/interface/template#kind] property of the @Template@ object, is derived from the extension of the template file. This will be used to set the MIME type of the response when rendered with the [node:dev/plugin/interface/exchange#render] function of [node:dev/plugin/interface/exchange].

To produce the output from the template as a @String@, call [node:dev/plugin/interface/template#render] on the @Template@ object, passing in a view as described in the Handlebars documentation linked above.
